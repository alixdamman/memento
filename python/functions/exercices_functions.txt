Exercise 0: create an new empty project

* create an empty project called “python_workshop” (in c:\usr\)
* copy all files & directories from <desktop>/python_workshop/ to c:\usr\python_workshop.
  You should have at least:
  - a directory /input with two Excel files,
  - a directory /output
  - an empty module "hello.py"
  - a module "model_function.py"


====== How to define and call functions ======

Exercise 1: create and call a function "hello" with no argument

* open the module "hello.py"
* define a function "hello" with no arguments and make it display "Hello World !" using the print() built-in function
* call the function
Note: functions must be defined before being called


Exercise 2: add arguments to the function "hello"

* add the arguments 'firstname' and 'surname' to the "hello" function
* modify the function so that it displays "Hello <firstname> <surname>!"
* call the function by passing your firstname and surname as strings
* store your firstname and surname in variable 'fname' and 'sname' respectively
* call the function by passing the variables 'fname' and 'sname'


Exercise 3: make function "hello" return a string

* use the return statement in the "hello" function to return the string "Hello <firstname> <surname>!"
  (instead of printing it)
* call the function and store the returned string in a new variable 'msg'
* display the content of 'msg' using the print() built-in function


Exercice 4: create a function in a model script

* open the module "model_function.py"
* create a function called 'projection' that reproduces the calculation done below comments "# start projection ..."
  The function has two arguments called 'initial_pop' and 'coef' and returns a new array containing the projected
  population.
* replace the three code blocks by calls to the 'projection' function
* call the function "projection" three times with different values for the argument 'coef' and store the results in
  arrays 'proj_pop1', 'proj_pop2' and 'proj_pop3'


====== Keyword arguments ======

Exercise 5: call function "projection" using keyword arguments

* change the second call to "projection" by passing one positional argument and one keyword argument
* change the third call to "projection" by passing arguments in reverse order
  (Hint: use keyword arguments)


====== Default argument values ======

Exercise 6: add an argument with a default value to the function "projection"

* add a boolean argument "display" with default value set to "False"
* before returning the result in function "projection", start the viewer if "display" is "True"
* change calls to function "projection" so that it displays the result before it returns the result of projection
